script.
  (function() {
    var $countdown = document.querySelector('.js-countdown-number');
    var $label = document.querySelector('.js-countdown-label');
    var date = $countdown.getAttribute('data-date');

    (function updateCountdown() {
      var now  = new Date();
      var kickoff = Date.parse(date);
      var diff = kickoff - now;
      var days = Math.ceil(diff / (1000*60*60*24));

      if (days === 1) {
        $label.innerHTML = 'Día';
      } else if (days === 0) {
        days = 'Hoy'
        $label.innerHTML = '';
      } else if (days < 0) {
        days = '¯\\_(ツ)_/¯';
        $label.innerHTML = '';
      }

      $countdown.innerHTML = days;
    }());

    navigator.serviceWorker
      .register('/sw.js', { scope: '/' })
      .then(function(registration) {
        var isUpdate = false;
        if (registration.active) { isUpdate = true; }
        registration.onupdatefound = function(eve) {
          console.log('A new Service Worker version has been found...');
        };
        registration.installing.onstatechange = function(eve) {
          if (this.state === 'installed') {
            console.log('Service Worker Installed.');
            if (isUpdate) {
              console.log('App updated. Restart for the new version.');
            } else {
              console.log('App ready for offline use.');
            }
          } else {
            console.log('New Service Worker state: ', this.state);
          }
        };
        console.log('Registration succeeded. Scope is: ' + registration.scope);
      }).catch(function(error) {
        console.log('Registration failed with: ' + error);
      });
  }());